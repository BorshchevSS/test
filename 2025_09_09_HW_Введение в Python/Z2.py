"""Задача 2:
Разработайте программу для учёта времени учебы за неделю.
Программа должна позволять пользователю ввести количество учебных дней (не более семи),
а затем для каждого дня вводить количество часов, посвящённых учёбе.
Программа должна обрабатывать ошибки ввода, такие как ввод нечисловых значений и отрицательных чисел,
и запрашивать повторный ввод при необходимости.

Указания:
1. Используйте цикл while для запроса количества учебных дней, обеспечивая, чтобы количество дней не превышало семь и было положительным числом.
2. Используйте цикл for для запроса количества часов учебы в каждый из указанных дней.
3. Примените блоки try и except для обработки исключений при вводе количества часов, убедитесь, что введены только положительные числа.
4. В случае ошибки ввода запросите данные повторно, пока не будут получены корректные значения.

Ожидаемый результат:
программа должна корректно принимать количество учебных дней и количество часов учебы для каждого дня, эффективно обрабатывать возможные ошибки ввода, и в конце вывести общее количество часов учебы за неделю.

1. Используйте цикл while для запроса количества учебных дней, обеспечивая, чтобы количество дней не превышало семь и было положительным числом.
2. Используйте цикл for для запроса количества часов учебы в каждый из указанных дней.
3. Примените блоки try и except для обработки исключений при вводе количества часов, убедитесь, что введены только положительные числа.
4. В случае ошибки ввода запросите данные повторно, пока не будут получены корректные значения.

Ожидаемый результат: программа должна корректно принимать количество учебных дней и количество часов учебы для каждого дня, эффективно обрабатывать возможные ошибки ввода, и в конце вывести общее количество часов учебы за неделю.
"""
#Функция для ввода и проверки количество часов
def inputAmountHour ():
    while True:
        try:
            amountHour = int(input("Введите количество часов (округлите до целого значения): "))
            if amountHour <=0 or amountHour > 24:
                print("Введи положительное число не более 24")
                continue
            break
        except ValueError:
            print("Введи целое число")
    return amountHour

#Ввод количества учебных дней, проверка (Количество дней не должно превышать семи и быть положительным числом)
while True:
    try:
        numStudyDays = int(input("Введите количество учебных дней (не более семи): "))
        if (numStudyDays <= 0) or (numStudyDays > 7):
            print(f"Значение '{numStudyDays}' не соответствует требованиям: Количество дней не должно превышать семи и быть положительным числом.")
            continue
        break
    except ValueError:
        print("Введи целое число")

dict_NumDay_AmountHour = {}

for i in range(1, numStudyDays + 1):
    # print(f"{i}_{inputAmountHour()}")
    dict_NumDay_AmountHour[f"Day №{i}"] = inputAmountHour() #Добавляю значения в словарь
#print(dict_NumDay_AmountHour)
#print(dict_NumDay_AmountHour.values())
sumHour = sum(dict_NumDay_AmountHour.values()) #Складываю значения внутри словаря
#sumHour = sum(v for v in dict_NumDay_AmountHour.values() if isinstance(v, (int, float))) #Если словарь содержит не только числовые значения, а также требуется фильтрация, можно использовать генератор списка с условием
print(f"Общее количество часов учебы за неделю: {sumHour} \n Распределение по дням: {dict_NumDay_AmountHour}")
